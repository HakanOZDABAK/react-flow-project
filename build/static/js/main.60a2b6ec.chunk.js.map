{"version":3,"sources":["components/Node.jsx","App.js","serviceWorker.js","index.js"],"names":["initialElements","onLoad","reactFlowInstance","fitView","reactFlowNod","width","height","Nodes","useState","elements","setElements","name","setName","style","onConnect","params","e","addEdge","connectionLineStyle","stroke","strokeWidth","connectionLineType","snapToGrid","snapGrid","color","gap","nodeColor","n","type","onChange","target","value","marginLeft","borderRadius","onClick","concat","id","length","toString","data","label","position","x","window","innerWidth","y","innerHeight","backgroundColor","jsonData","JSON","stringify","console","log","blob","Blob","url","URL","createObjectURL","a","document","createElement","href","download","click","revokeObjectURL","App","className","Node","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.60a2b6ec.chunk.js","sourcesContent":["import React, { useState, Fragment } from 'react';\nimport ReactFlow, { addEdge, Background, Controls, MiniMap } from 'react-flow-renderer';\nconst initialElements = [\n\n]\nconst onLoad = (reactFlowInstance) => {\n    reactFlowInstance.fitView();\n}\nconst reactFlowNod = {\n    width: '100%',\n    height: '90vh'\n}\n\n\n\nconst Nodes = () => {\n    const [elements, setElements] = useState(initialElements);\n    const [name, setName] = useState(\"\")\n\n    const addNodeAPI = () => {\n        setElements(e => e.concat({\n            id: (e.length + 1).toString(),\n            data: { label: name },\n            type: \"default\",\n            position: { x: 0.1 * window.innerWidth, y: 0.1 * window.innerHeight }\n        }));\n    };\n\n    const addNodeUser = () => {\n\n        setElements(e => e.concat({\n\n            id: (e.length + 1).toString(),\n\n            data: { label: name },\n            type: \"output\",\n            position: { x: 0.1 * window.innerWidth, y: 0.1 * window.innerHeight },\n            style: {\n                backgroundColor: 'blue'\n            }\n        }));\n    };\n\n\n    const addNodeDB = () => {\n        setElements(e => e.concat({\n            id: (e.length + 1).toString(),\n            type: 'input',\n            data: { label: name },\n            position: { x: 0, y: 0 }\n        }));\n    };\n\n    const onConnect = (params) => setElements(e => addEdge(params, e));\n\n\n    return (\n\n        <Fragment>\n            <ReactFlow\n                elements={elements}\n                onLoad={onLoad}\n                style={reactFlowNod}\n                onConnect={onConnect}\n                connectionLineStyle={{ stroke: \"#ddd\", strokeWidth: 2 }}\n                connectionLineType=\"bezier\"\n                snapToGrid={true}\n                snapGrid={[16, 16]}\n            >\n                <Background\n                    color=\"#888\"\n                    gap={16}\n                />\n                <MiniMap\n                    nodeColor={n => {\n                        if (n.type === 'input') return 'blue';\n\n                        return 'red'\n                    }} />\n                <Controls />\n            </ReactFlow>\n\n            <div>\n                <input type=\"text\"\n                    onChange={e => setName(e.target.value)}\n                    name=\"title\" />\n\n                <button style={{\n                    width: '50px',\n                    height: '50px',\n                    marginLeft: '10px',\n                    borderRadius: '50%'\n                }}\n                    type=\"button\"\n                    onClick={addNodeAPI}\n                >API </button>\n\n                <button style={{\n                    width: '50px',\n                    height: '50px',\n                    borderRadius: '50%',\n                    marginLeft: '10px'\n                }}\n                    type=\"button\"\n                    onClick={addNodeUser}\n                >Users </button>\n\n                <button style={{\n                    width: '50px',\n                    height: '50px',\n                    marginLeft: '10px',\n                    borderRadius: '50%'\n                }}\n                    type=\"button\"\n                    onClick={addNodeDB}\n                >DB </button>\n                <button style={{\n                    width: '100px',\n                    height: '50px',\n                    marginLeft: '100px'\n                }}\n                    type=\"button\"\n                    onClick={() => {\n                        const jsonData = JSON.stringify(elements, null, 2)\n                        console.log(jsonData)\n                        const blob = new Blob([jsonData], { type: 'application/json' })\n                        const url = URL.createObjectURL(blob)\n                        const a = document.createElement('a')\n                        a.href = url\n                        a.download = 'diagram.json'\n                        a.click()\n\n                        URL.revokeObjectURL(url);\n\n                    }}\n                    \n                > Save As a JSON File</button>\n            </div>\n        </Fragment>\n    )\n}\n\nexport default Nodes;","import React from 'react';\nimport Nodes from './components/Node'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Nodes />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}